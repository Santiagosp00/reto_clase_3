// For PegInHole
float angle_1 = 0.0;
float angle_2 = 0.0;

PShape piece;
  
float s1x = 0;      
float s1y = 0;
float s1w = 50;     
float s1h = 100;

float s2x = 0;    
float s2y = 350;
float s2w = 260;
float s2h = 480;

float s3x = 330;    
float s3y = 350;
float s3w = 640;
float s3h = 480;

float s4x = 250;    
float s4y = 420;
float s4w = 340;
float s4h = 480;



void setup() {
  size(640, 480);
}
void draw() {
drawSurface();
angle_1 = atan2(mouseY - 160, 150) - HALF_PI;
drawFirstArm();
angle_2 = atan2(320, mouseX - 200) - HALF_PI;
drawSecondArm();
drawPiece();
//s1x = (295 - 240*(1-cos(angle_1)) - 100*sin(angle_2));
//s1y = (300 + 240*sin(angle_1) - 100*(1-cos(angle_2)));
//rect(s1x,s1y,s1w+10,s1h+10);
// if hit, change rectangle color
boolean hit = rectRect(s1x,s1y,s1w,s1h, s2x,s2y,s2w,s2h);
if (hit) {
  fill(255,150,0);
}
else {
  fill(173,216,230);
}
rect(s2x,s2y,s2w,s2h);
rect(s3x,s3y,s3w,s3h);
rect(s4x,s4y,s4w,s4h);

}
void drawSurface()
{
background(255);
fill(173,216,230);
noStroke();

}

void drawFirstArm() {
stroke(100);
strokeWeight(10);
pushMatrix();
translate(80,200);
rotate(angle_1);
line(0,0,240,0);
popMatrix();
}

void drawSecondArm() {
stroke(100);
strokeWeight(10);
pushMatrix();
translate(320,200);
translate(-240*(1-cos(angle_1)),240*sin(angle_1));
rotate(angle_2);
line(0,0,0,120);
popMatrix();
}

void drawPiece() {
noStroke();
fill(173,216,230);
pushMatrix();
translate(295,300);
translate(-240*(1-cos(angle_1)),240*sin(angle_1));
translate(-100*sin(angle_2),-100*(1-cos(angle_2)));
rotate(angle_2);
piece = createShape(RECT,0, 0, s1w, s1h);
shape(piece,0,0);
s1x = screenX(0, 0);
s1y = screenY(0, 0);
popMatrix();
}

boolean rectRect(float r1x, float r1y, float r1w, float r1h, float r2x, float r2y, float r2w, float r2h) {

// are the sides of one rectangle touching the other?

if (r1x + r1w >= r2x &&    // r1 right edge past r2 left
    r1x <= r2x + r2w &&    // r1 left edge past r2 right
    r1y + r1h >= r2y &&    // r1 top edge past r2 bottom
    r1y <= r2y + r2h) {    // r1 bottom edge past r2 top
      return true;
}
return false;
}
